<dummyMainClass: void dummyMainMethod(java.lang.String[])> -> <dummyMainClass: com.example.intentFlowBench.SubActivity9_2 dummyMainMethod_com_example_intentFlowBench_SubActivity9__2(android.content.Intent)>
<dummyMainClass: void dummyMainMethod(java.lang.String[])> -> <dummyMainClass: com.example.intentFlowBench.AbstractActivity dummyMainMethod_com_example_intentFlowBench_AbstractActivity(android.content.Intent)>
<dummyMainClass: void dummyMainMethod(java.lang.String[])> -> <dummyMainClass: com.example.intentFlowBench.SubActivity4 dummyMainMethod_com_example_intentFlowBench_SubActivity4(android.content.Intent)>
<dummyMainClass: void dummyMainMethod(java.lang.String[])> -> <dummyMainClass: com.example.intentFlowBench.SubActivity7 dummyMainMethod_com_example_intentFlowBench_SubActivity7(android.content.Intent)>
<dummyMainClass: void dummyMainMethod(java.lang.String[])> -> <dummyMainClass: com.example.intentFlowBench.SubActivity6 dummyMainMethod_com_example_intentFlowBench_SubActivity6(android.content.Intent)>
<dummyMainClass: void dummyMainMethod(java.lang.String[])> -> <dummyMainClass: com.example.intentFlowBench.SubActivity2 dummyMainMethod_com_example_intentFlowBench_SubActivity2(android.content.Intent)>
<dummyMainClass: void dummyMainMethod(java.lang.String[])> -> <dummyMainClass: com.example.intentFlowBench.SubActivity12 dummyMainMethod_com_example_intentFlowBench_SubActivity12(android.content.Intent)>
<dummyMainClass: void dummyMainMethod(java.lang.String[])> -> <dummyMainClass: com.example.intentFlowBench.MainActivity dummyMainMethod_com_example_intentFlowBench_MainActivity(android.content.Intent)>
<dummyMainClass: void dummyMainMethod(java.lang.String[])> -> <dummyMainClass: com.example.intentFlowBench.SubActivity9_1 dummyMainMethod_com_example_intentFlowBench_SubActivity9__1(android.content.Intent)>
<dummyMainClass: void dummyMainMethod(java.lang.String[])> -> <dummyMainClass: com.example.intentFlowBench.SubActivity10 dummyMainMethod_com_example_intentFlowBench_SubActivity10(android.content.Intent)>
<dummyMainClass: void dummyMainMethod(java.lang.String[])> -> <dummyMainClass: com.example.intentFlowBench.SubActivity5 dummyMainMethod_com_example_intentFlowBench_SubActivity5(android.content.Intent)>
<dummyMainClass: void dummyMainMethod(java.lang.String[])> -> <dummyMainClass: com.example.intentFlowBench.SubActivity11 dummyMainMethod_com_example_intentFlowBench_SubActivity11(android.content.Intent)>
<dummyMainClass: void dummyMainMethod(java.lang.String[])> -> <dummyMainClass: com.example.intentFlowBench.SubActivity8 dummyMainMethod_com_example_intentFlowBench_SubActivity8(android.content.Intent)>
<dummyMainClass: void dummyMainMethod(java.lang.String[])> -> <dummyMainClass: com.example.intentFlowBench.SubActivity3 dummyMainMethod_com_example_intentFlowBench_SubActivity3(android.content.Intent)>
<dummyMainClass: void dummyMainMethod(java.lang.String[])> -> <dummyMainClass: com.example.intentFlowBench.SubActivity1 dummyMainMethod_com_example_intentFlowBench_SubActivity1(android.content.Intent)>
<dummyMainClass: com.example.intentFlowBench.SubActivity1 dummyMainMethod_com_example_intentFlowBench_SubActivity1(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity1: void <init>()>
<dummyMainClass: com.example.intentFlowBench.SubActivity1 dummyMainMethod_com_example_intentFlowBench_SubActivity1(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity1: void onCreate(android.os.Bundle)>
<com.example.intentFlowBench.SubActivity1: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.SubActivity1$1: void <init>(com.example.intentFlowBench.SubActivity1)>
<com.example.intentFlowBench.SubActivity1$1: void <init>(com.example.intentFlowBench.SubActivity1)> -> <java.lang.Object: void <init>()>
<java.lang.Object: void <init>()> -> <java.lang.Object: void finalize()>
<java.lang.RuntimeException: void <init>(java.lang.String)> -> <java.lang.Exception: void <init>()>
<java.lang.Exception: void <init>()> -> <java.lang.Throwable: void <init>()>
<com.example.intentFlowBench.SubActivity1: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.SubActivity1: void analyzeIntent()>
<com.example.intentFlowBench.SubActivity1: void analyzeIntent()> -> <com.example.intentFlowBench.SubActivity1: android.content.Intent getIntent()>
<dummyMainClass: com.example.intentFlowBench.SubActivity3 dummyMainMethod_com_example_intentFlowBench_SubActivity3(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity3: void <init>()>
<dummyMainClass: com.example.intentFlowBench.SubActivity3 dummyMainMethod_com_example_intentFlowBench_SubActivity3(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity3: void onCreate(android.os.Bundle)>
<com.example.intentFlowBench.SubActivity3: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.SubActivity3$2: void <init>(com.example.intentFlowBench.SubActivity3)>
<com.example.intentFlowBench.SubActivity3$2: void <init>(com.example.intentFlowBench.SubActivity3)> -> <java.lang.Object: void <init>()>
<com.example.intentFlowBench.SubActivity3: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.SubActivity3$1: void <init>(com.example.intentFlowBench.SubActivity3)>
<com.example.intentFlowBench.SubActivity3$1: void <init>(com.example.intentFlowBench.SubActivity3)> -> <java.lang.Object: void <init>()>
<com.example.intentFlowBench.SubActivity3: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.SubActivity3: void analyzeIntent()>
<com.example.intentFlowBench.SubActivity3: void analyzeIntent()> -> <java.lang.String: void <clinit>()>
<com.example.intentFlowBench.SubActivity3: void analyzeIntent()> -> <java.lang.String: java.lang.String valueOf(int)>
<java.lang.String: java.lang.String valueOf(int)> -> <java.lang.RuntimeException: void <init>(java.lang.String)>
<com.example.intentFlowBench.SubActivity3: void analyzeIntent()> -> <com.example.intentFlowBench.SubActivity3: android.content.Intent getIntent()>
<dummyMainClass: com.example.intentFlowBench.SubActivity8 dummyMainMethod_com_example_intentFlowBench_SubActivity8(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity8: void <init>()>
<dummyMainClass: com.example.intentFlowBench.SubActivity8 dummyMainMethod_com_example_intentFlowBench_SubActivity8(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity8: void onCreate(android.os.Bundle)>
<com.example.intentFlowBench.SubActivity8: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.SubActivity8: void firstLevel()>
<dummyMainClass: com.example.intentFlowBench.SubActivity11 dummyMainMethod_com_example_intentFlowBench_SubActivity11(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity11: void <init>()>
<dummyMainClass: com.example.intentFlowBench.SubActivity11 dummyMainMethod_com_example_intentFlowBench_SubActivity11(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity11: void onCreate(android.os.Bundle)>
<com.example.intentFlowBench.SubActivity11: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.SubActivity11$1: void <init>(com.example.intentFlowBench.SubActivity11)>
<com.example.intentFlowBench.SubActivity11$1: void <init>(com.example.intentFlowBench.SubActivity11)> -> <java.lang.Object: void <init>()>
<dummyMainClass: com.example.intentFlowBench.SubActivity5 dummyMainMethod_com_example_intentFlowBench_SubActivity5(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity5: void <init>()>
<dummyMainClass: com.example.intentFlowBench.SubActivity5 dummyMainMethod_com_example_intentFlowBench_SubActivity5(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity5: void onCreate(android.os.Bundle)>
<dummyMainClass: com.example.intentFlowBench.SubActivity5 dummyMainMethod_com_example_intentFlowBench_SubActivity5(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity5: void onStart()>
<com.example.intentFlowBench.SubActivity5: void onStart()> -> <com.example.intentFlowBench.SubActivity5: void warpper2(java.lang.String)>
<com.example.intentFlowBench.SubActivity5: void onStart()> -> <com.example.intentFlowBench.SubActivity5: void warpper3(java.lang.String,java.lang.String)>
<com.example.intentFlowBench.SubActivity5: void warpper3(java.lang.String,java.lang.String)> -> <com.example.intentFlowBench.SubActivity5: void analyzeIntent(java.lang.String)>
<com.example.intentFlowBench.SubActivity5: void warpper2(java.lang.String)> -> <com.example.intentFlowBench.SubActivity5: void warpper(java.lang.String)>
<com.example.intentFlowBench.SubActivity5: void warpper(java.lang.String)> -> <com.example.intentFlowBench.SubActivity5: void analyzeIntent(java.lang.String)>
<com.example.intentFlowBench.SubActivity5: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.SubActivity5: void analyzeIntent(java.lang.String)>
<com.example.intentFlowBench.SubActivity5: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.SubActivity5: void warpper(java.lang.String)>
<dummyMainClass: com.example.intentFlowBench.SubActivity10 dummyMainMethod_com_example_intentFlowBench_SubActivity10(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity10: void <init>()>
<dummyMainClass: com.example.intentFlowBench.SubActivity10 dummyMainMethod_com_example_intentFlowBench_SubActivity10(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity10: void onCreate(android.os.Bundle)>
<com.example.intentFlowBench.SubActivity10: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.SubActivity10: void launchStaticIntent()>
<dummyMainClass: com.example.intentFlowBench.SubActivity9_1 dummyMainMethod_com_example_intentFlowBench_SubActivity9__1(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity9_1: void <init>()>
<dummyMainClass: com.example.intentFlowBench.SubActivity9_1 dummyMainMethod_com_example_intentFlowBench_SubActivity9__1(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity9_1: void onCreate(android.os.Bundle)>
<com.example.intentFlowBench.SubActivity9_1: void onCreate(android.os.Bundle)> -> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.example.intentFlowBench.SubActivity9_1: void onCreate(android.os.Bundle)> -> <java.lang.String: void <clinit>()>
<java.lang.String: java.lang.String valueOf(java.lang.Object)> -> <java.lang.RuntimeException: void <init>(java.lang.String)>
<com.example.intentFlowBench.SubActivity9_1: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.ContextSensi: void <init>()>
<com.example.intentFlowBench.SubActivity9_1: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.ContextSensi: void analyzeIntent(android.content.Context,android.content.Intent)>
<com.example.intentFlowBench.ContextSensi: void <init>()> -> <java.lang.Object: void <init>()>
<dummyMainClass: com.example.intentFlowBench.MainActivity dummyMainMethod_com_example_intentFlowBench_MainActivity(android.content.Intent)> -> <com.example.intentFlowBench.MainActivity: void <init>()>
<dummyMainClass: com.example.intentFlowBench.MainActivity dummyMainMethod_com_example_intentFlowBench_MainActivity(android.content.Intent)> -> <com.example.intentFlowBench.MainActivity: void onCreate(android.os.Bundle)>
<com.example.intentFlowBench.MainActivity: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.MainActivity$3: void <init>(com.example.intentFlowBench.MainActivity)>
<com.example.intentFlowBench.MainActivity$3: void <init>(com.example.intentFlowBench.MainActivity)> -> <java.lang.Object: void <init>()>
<com.example.intentFlowBench.MainActivity: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.MainActivity$2: void <init>(com.example.intentFlowBench.MainActivity)>
<com.example.intentFlowBench.MainActivity$2: void <init>(com.example.intentFlowBench.MainActivity)> -> <java.lang.Object: void <init>()>
<com.example.intentFlowBench.MainActivity: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.MainActivity$1: void <init>(com.example.intentFlowBench.MainActivity)>
<com.example.intentFlowBench.MainActivity$1: void <init>(com.example.intentFlowBench.MainActivity)> -> <java.lang.Object: void <init>()>
<dummyMainClass: com.example.intentFlowBench.SubActivity12 dummyMainMethod_com_example_intentFlowBench_SubActivity12(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity12: void <init>()>
<dummyMainClass: com.example.intentFlowBench.SubActivity12 dummyMainMethod_com_example_intentFlowBench_SubActivity12(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity12: void onCreate(android.os.Bundle)>
<dummyMainClass: com.example.intentFlowBench.SubActivity2 dummyMainMethod_com_example_intentFlowBench_SubActivity2(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity2: void <init>()>
<dummyMainClass: com.example.intentFlowBench.SubActivity2 dummyMainMethod_com_example_intentFlowBench_SubActivity2(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity2: void onCreate(android.os.Bundle)>
<com.example.intentFlowBench.SubActivity2: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.SubActivity2$1: void <init>(com.example.intentFlowBench.SubActivity2)>
<com.example.intentFlowBench.SubActivity2$1: void <init>(com.example.intentFlowBench.SubActivity2)> -> <java.lang.Object: void <init>()>
<com.example.intentFlowBench.SubActivity2: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.SubActivity2: void analyzeIntent()>
<com.example.intentFlowBench.SubActivity2: void analyzeIntent()> -> <com.example.intentFlowBench.SubActivity2: android.content.Intent getIntent()>
<dummyMainClass: com.example.intentFlowBench.SubActivity6 dummyMainMethod_com_example_intentFlowBench_SubActivity6(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity6: void <init>()>
<dummyMainClass: com.example.intentFlowBench.SubActivity6 dummyMainMethod_com_example_intentFlowBench_SubActivity6(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity6: void onCreate(android.os.Bundle)>
<com.example.intentFlowBench.SubActivity6: void onCreate(android.os.Bundle)> -> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.example.intentFlowBench.SubActivity6: void onCreate(android.os.Bundle)> -> <java.lang.String: void <clinit>()>
<com.example.intentFlowBench.SubActivity6: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.SubActivity6: void analyzeIntentSub1(android.content.Intent)>
<com.example.intentFlowBench.SubActivity6: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.SubActivity6: void analyzeIntentSub2(android.content.Intent)>
<com.example.intentFlowBench.SubActivity6: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.SubActivity6: void analyzeIntentSub3()>
<com.example.intentFlowBench.SubActivity6: void analyzeIntentSub3()> -> <java.lang.String: java.lang.String substring(int,int)>
<java.lang.String: java.lang.String substring(int,int)> -> <java.lang.RuntimeException: void <init>(java.lang.String)>
<com.example.intentFlowBench.SubActivity6: void analyzeIntentSub1(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity6: void analyzeIntentSub2(android.content.Intent)>
<dummyMainClass: com.example.intentFlowBench.SubActivity7 dummyMainMethod_com_example_intentFlowBench_SubActivity7(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity7: void <init>()>
<dummyMainClass: com.example.intentFlowBench.SubActivity7 dummyMainMethod_com_example_intentFlowBench_SubActivity7(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity7: void onCreate(android.os.Bundle)>
<com.example.intentFlowBench.SubActivity7: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.SubActivity7: void firstLevel()>
<com.example.intentFlowBench.SubActivity7: void firstLevel()> -> <com.example.intentFlowBench.SubActivity7: void secondLevel()>
<dummyMainClass: com.example.intentFlowBench.SubActivity4 dummyMainMethod_com_example_intentFlowBench_SubActivity4(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity4: void <init>()>
<dummyMainClass: com.example.intentFlowBench.SubActivity4 dummyMainMethod_com_example_intentFlowBench_SubActivity4(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity4: void onCreate(android.os.Bundle)>
<com.example.intentFlowBench.SubActivity4: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.SubActivity4$2: void <init>(com.example.intentFlowBench.SubActivity4)>
<com.example.intentFlowBench.SubActivity4$2: void <init>(com.example.intentFlowBench.SubActivity4)> -> <java.lang.Object: void <init>()>
<com.example.intentFlowBench.SubActivity4: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.SubActivity4$1: void <init>(com.example.intentFlowBench.SubActivity4)>
<com.example.intentFlowBench.SubActivity4$1: void <init>(com.example.intentFlowBench.SubActivity4)> -> <java.lang.Object: void <init>()>
<com.example.intentFlowBench.SubActivity4: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.SubActivity4: void analyzeIntent()>
<com.example.intentFlowBench.SubActivity4: void analyzeIntent()> -> <java.lang.String: void <clinit>()>
<com.example.intentFlowBench.SubActivity4: void analyzeIntent()> -> <java.lang.String: java.lang.String valueOf(boolean)>
<java.lang.String: java.lang.String valueOf(boolean)> -> <java.lang.RuntimeException: void <init>(java.lang.String)>
<com.example.intentFlowBench.SubActivity4: void analyzeIntent()> -> <com.example.intentFlowBench.SubActivity4: android.content.Intent getIntent()>
<dummyMainClass: com.example.intentFlowBench.SubActivity9_2 dummyMainMethod_com_example_intentFlowBench_SubActivity9__2(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity9_2: void <init>()>
<dummyMainClass: com.example.intentFlowBench.SubActivity9_2 dummyMainMethod_com_example_intentFlowBench_SubActivity9__2(android.content.Intent)> -> <com.example.intentFlowBench.SubActivity9_2: void onCreate(android.os.Bundle)>
<com.example.intentFlowBench.SubActivity9_2: void onCreate(android.os.Bundle)> -> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
<com.example.intentFlowBench.SubActivity9_2: void onCreate(android.os.Bundle)> -> <java.lang.String: void <clinit>()>
<com.example.intentFlowBench.SubActivity9_2: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.ContextSensi: void <init>()>
<com.example.intentFlowBench.SubActivity9_2: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.ContextSensi: void analyzeIntent(android.content.Context,android.content.Intent)>
<org.hamcrest.DiagnosingMatcher: void <init>()> -> <org.hamcrest.BaseMatcher: void <init>()>
<org.hamcrest.BaseDescription: void <init>()> -> <java.lang.Object: void <init>()>
<org.hamcrest.BaseDescription: org.hamcrest.Description appendList(java.lang.String,java.lang.String,java.lang.String,java.util.Iterator)> -> <org.hamcrest.BaseDescription: void append(java.lang.String)>
<org.hamcrest.BaseDescription: org.hamcrest.Description appendList(java.lang.String,java.lang.String,java.lang.String,java.util.Iterator)> -> <org.hamcrest.BaseDescription: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>
<org.hamcrest.BaseDescription: org.hamcrest.Description appendValueList(java.lang.String,java.lang.String,java.lang.String,java.util.Iterator)> -> <org.hamcrest.internal.SelfDescribingValueIterator: void <init>(java.util.Iterator)>
<org.hamcrest.BaseDescription: org.hamcrest.Description appendValueList(java.lang.String,java.lang.String,java.lang.String,java.util.Iterator)> -> <org.hamcrest.BaseDescription: org.hamcrest.Description appendList(java.lang.String,java.lang.String,java.lang.String,java.util.Iterator)>
<org.hamcrest.BaseDescription: java.lang.String descriptionOf(java.lang.Object)> -> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
<org.hamcrest.BaseDescription: void toJavaSyntax(char)> -> <org.hamcrest.BaseDescription: void append(java.lang.String)>
<org.hamcrest.BaseDescription: void toJavaSyntax(java.lang.String)> -> <org.hamcrest.BaseDescription: void toJavaSyntax(char)>
<org.hamcrest.BaseDescription: org.hamcrest.Description appendList(java.lang.String,java.lang.String,java.lang.String,java.lang.Iterable)> -> <org.hamcrest.BaseDescription: org.hamcrest.Description appendList(java.lang.String,java.lang.String,java.lang.String,java.util.Iterator)>
<org.hamcrest.BaseDescription: org.hamcrest.Description appendText(java.lang.String)> -> <org.hamcrest.BaseDescription: void append(java.lang.String)>
<org.hamcrest.BaseDescription: org.hamcrest.Description appendValue(java.lang.Object)> -> <org.hamcrest.BaseDescription: void append(java.lang.String)>
<org.hamcrest.BaseDescription: org.hamcrest.Description appendValue(java.lang.Object)> -> <org.hamcrest.BaseDescription: void toJavaSyntax(java.lang.String)>
<org.hamcrest.BaseDescription: org.hamcrest.Description appendValue(java.lang.Object)> -> <org.hamcrest.BaseDescription: void toJavaSyntax(char)>
<org.hamcrest.BaseDescription: org.hamcrest.Description appendValue(java.lang.Object)> -> <org.hamcrest.BaseDescription: java.lang.String descriptionOf(java.lang.Object)>
<org.hamcrest.BaseDescription: org.hamcrest.Description appendValue(java.lang.Object)> -> <org.hamcrest.internal.ArrayIterator: void <init>(java.lang.Object)>
<org.hamcrest.BaseDescription: org.hamcrest.Description appendValue(java.lang.Object)> -> <org.hamcrest.BaseDescription: org.hamcrest.Description appendValueList(java.lang.String,java.lang.String,java.lang.String,java.util.Iterator)>
<org.hamcrest.BaseDescription: org.hamcrest.Description appendValueList(java.lang.String,java.lang.String,java.lang.String,java.lang.Iterable)> -> <org.hamcrest.BaseDescription: org.hamcrest.Description appendValueList(java.lang.String,java.lang.String,java.lang.String,java.util.Iterator)>
<org.hamcrest.BaseDescription: org.hamcrest.Description appendValueList(java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])> -> <org.hamcrest.BaseDescription: org.hamcrest.Description appendValueList(java.lang.String,java.lang.String,java.lang.String,java.lang.Iterable)>
<org.hamcrest.core.IsNot: void <init>(org.hamcrest.Matcher)> -> <org.hamcrest.BaseMatcher: void <init>()>
<org.hamcrest.core.IsNot: org.hamcrest.Matcher not(java.lang.Object)> -> <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>
<org.hamcrest.core.IsNot: org.hamcrest.Matcher not(java.lang.Object)> -> <org.hamcrest.core.IsNot: org.hamcrest.Matcher not(org.hamcrest.Matcher)>
<org.hamcrest.core.IsNot: org.hamcrest.Matcher not(org.hamcrest.Matcher)> -> <org.hamcrest.core.IsNot: void <init>(org.hamcrest.Matcher)>
<org.hamcrest.core.AllOf: void <init>(java.lang.Iterable)> -> <org.hamcrest.DiagnosingMatcher: void <init>()>
<org.hamcrest.core.AllOf: org.hamcrest.Matcher allOf(java.lang.Iterable)> -> <org.hamcrest.core.AllOf: void <init>(java.lang.Iterable)>
<org.hamcrest.core.AllOf: org.hamcrest.Matcher allOf(org.hamcrest.Matcher,org.hamcrest.Matcher)> -> <org.hamcrest.core.AllOf: org.hamcrest.Matcher allOf(java.lang.Iterable)>
<org.hamcrest.core.AllOf: org.hamcrest.Matcher allOf(org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher)> -> <org.hamcrest.core.AllOf: org.hamcrest.Matcher allOf(java.lang.Iterable)>
<org.hamcrest.core.AllOf: org.hamcrest.Matcher allOf(org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher)> -> <org.hamcrest.core.AllOf: org.hamcrest.Matcher allOf(java.lang.Iterable)>
<org.hamcrest.core.AllOf: org.hamcrest.Matcher allOf(org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher)> -> <org.hamcrest.core.AllOf: org.hamcrest.Matcher allOf(java.lang.Iterable)>
<org.hamcrest.core.AllOf: org.hamcrest.Matcher allOf(org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher)> -> <org.hamcrest.core.AllOf: org.hamcrest.Matcher allOf(java.lang.Iterable)>
<org.hamcrest.core.AllOf: org.hamcrest.Matcher allOf(org.hamcrest.Matcher[])> -> <org.hamcrest.core.AllOf: org.hamcrest.Matcher allOf(java.lang.Iterable)>
<org.hamcrest.core.Every: void <init>(org.hamcrest.Matcher)> -> <org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>
<org.hamcrest.core.Every: org.hamcrest.Matcher everyItem(org.hamcrest.Matcher)> -> <org.hamcrest.core.Every: void <init>(org.hamcrest.Matcher)>
<org.hamcrest.core.Every: boolean matchesSafely(java.lang.Object,org.hamcrest.Description)> -> <org.hamcrest.core.Every: boolean matchesSafely(java.lang.Iterable,org.hamcrest.Description)>
<org.hamcrest.core.IsEqual: void <init>(java.lang.Object)> -> <org.hamcrest.BaseMatcher: void <init>()>
<org.hamcrest.core.IsEqual: boolean areArraysEqual(java.lang.Object,java.lang.Object)> -> <org.hamcrest.core.IsEqual: boolean areArrayLengthsEqual(java.lang.Object,java.lang.Object)>
<org.hamcrest.core.IsEqual: boolean areArraysEqual(java.lang.Object,java.lang.Object)> -> <org.hamcrest.core.IsEqual: boolean areArrayElementsEqual(java.lang.Object,java.lang.Object)>
<org.hamcrest.core.IsEqual: boolean areEqual(java.lang.Object,java.lang.Object)> -> <org.hamcrest.core.IsEqual: boolean isArray(java.lang.Object)>
<org.hamcrest.core.IsEqual: boolean areEqual(java.lang.Object,java.lang.Object)> -> <org.hamcrest.core.IsEqual: boolean areArraysEqual(java.lang.Object,java.lang.Object)>
<org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)> -> <org.hamcrest.core.IsEqual: void <init>(java.lang.Object)>
<org.hamcrest.core.IsEqual: boolean matches(java.lang.Object)> -> <org.hamcrest.core.IsEqual: boolean areEqual(java.lang.Object,java.lang.Object)>
<com.example.intentFlowBench.R$attr: void <init>()> -> <java.lang.Object: void <init>()>
<org.hamcrest.core.CombinableMatcher$CombinableEitherMatcher: void <init>(org.hamcrest.Matcher)> -> <java.lang.Object: void <init>()>
<org.hamcrest.core.CombinableMatcher$CombinableEitherMatcher: org.hamcrest.core.CombinableMatcher or(org.hamcrest.Matcher)> -> <org.hamcrest.core.CombinableMatcher: void <init>(org.hamcrest.Matcher)>
<org.hamcrest.core.CombinableMatcher$CombinableEitherMatcher: org.hamcrest.core.CombinableMatcher or(org.hamcrest.Matcher)> -> <org.hamcrest.core.CombinableMatcher: org.hamcrest.core.CombinableMatcher or(org.hamcrest.Matcher)>
<org.hamcrest.core.StringContains: void <init>(java.lang.String)> -> <org.hamcrest.core.SubstringMatcher: void <init>(java.lang.String)>
<org.hamcrest.core.StringContains: org.hamcrest.Matcher containsString(java.lang.String)> -> <org.hamcrest.core.StringContains: void <init>(java.lang.String)>
<com.example.intentFlowBench.ObjInfo: void <clinit>()> -> <com.example.intentFlowBench.ObjInfo$1: void <init>()>
<com.example.intentFlowBench.ObjInfo: void <init>()> -> <java.lang.Object: void <init>()>
<com.example.intentFlowBench.ObjInfo: void <init>(int,java.lang.String)> -> <com.example.intentFlowBench.ObjInfo: void <init>()>
<com.example.intentFlowBench.ObjInfo: void <init>(int,java.lang.String)> -> <java.lang.Object: void <init>()>
<com.example.intentFlowBench.ObjInfo: void <init>(android.os.Parcel)> -> <com.example.intentFlowBench.ObjInfo: void <init>()>
<com.example.intentFlowBench.ObjInfo: void <init>(android.os.Parcel)> -> <java.lang.Object: void <init>()>
<org.hamcrest.TypeSafeMatcher: void <clinit>()> -> <org.hamcrest.internal.ReflectiveTypeFinder: void <init>(java.lang.String,int,int)>
<org.hamcrest.TypeSafeMatcher: void <init>()> -> <org.hamcrest.TypeSafeMatcher: void <init>(org.hamcrest.internal.ReflectiveTypeFinder)>
<org.hamcrest.TypeSafeMatcher: void <init>(java.lang.Class)> -> <org.hamcrest.BaseMatcher: void <init>()>
<org.hamcrest.TypeSafeMatcher: void <init>(java.lang.Class)> -> <org.hamcrest.TypeSafeMatcher: void <init>()>
<org.hamcrest.TypeSafeMatcher: void <init>(org.hamcrest.internal.ReflectiveTypeFinder)> -> <org.hamcrest.BaseMatcher: void <init>()>
<org.hamcrest.TypeSafeMatcher: void <init>(org.hamcrest.internal.ReflectiveTypeFinder)> -> <org.hamcrest.internal.ReflectiveTypeFinder: java.lang.Class findExpectedType(java.lang.Class)>
<org.hamcrest.TypeSafeMatcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)> -> <org.hamcrest.BaseMatcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>
<org.hamcrest.TypeSafeMatcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)> -> <org.hamcrest.TypeSafeMatcher: void describeMismatchSafely(java.lang.Object,org.hamcrest.Description)>
<org.hamcrest.TypeSafeMatcher: void describeMismatchSafely(java.lang.Object,org.hamcrest.Description)> -> <org.hamcrest.TypeSafeMatcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>
<org.hamcrest.TypeSafeMatcher: void describeMismatchSafely(java.lang.Object,org.hamcrest.Description)> -> <org.hamcrest.BaseMatcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>
<com.example.intentFlowBench.R$drawable: void <init>()> -> <java.lang.Object: void <init>()>
<org.hamcrest.Condition$NotMatched: void <init>()> -> <org.hamcrest.Condition: void <init>(org.hamcrest.Condition$1)>
<org.hamcrest.Condition$NotMatched: void <init>(org.hamcrest.Condition$1)> -> <org.hamcrest.Condition$NotMatched: void <init>()>
<org.hamcrest.Condition$NotMatched: org.hamcrest.Condition and(org.hamcrest.Condition$Step)> -> <org.hamcrest.Condition: org.hamcrest.Condition notMatched()>
<org.hamcrest.Description$NullDescription: void <init>()> -> <java.lang.Object: void <init>()>
<org.hamcrest.internal.SelfDescribingValue: void <init>(java.lang.Object)> -> <java.lang.Object: void <init>()>
<org.hamcrest.internal.ReflectiveTypeFinder: void <init>(java.lang.String,int,int)> -> <java.lang.Object: void <init>()>
<org.hamcrest.internal.ReflectiveTypeFinder: java.lang.Class findExpectedType(java.lang.Class)> -> <org.hamcrest.internal.ReflectiveTypeFinder: boolean canObtainExpectedTypeFrom(java.lang.reflect.Method)>
<org.hamcrest.internal.ReflectiveTypeFinder: java.lang.Class findExpectedType(java.lang.Class)> -> <org.hamcrest.internal.ReflectiveTypeFinder: java.lang.Class expectedTypeFrom(java.lang.reflect.Method)>
<org.hamcrest.core.CombinableMatcher: void <init>(org.hamcrest.Matcher)> -> <org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>
<org.hamcrest.core.CombinableMatcher: org.hamcrest.core.CombinableMatcher$CombinableBothMatcher both(org.hamcrest.Matcher)> -> <org.hamcrest.core.CombinableMatcher$CombinableBothMatcher: void <init>(org.hamcrest.Matcher)>
<org.hamcrest.core.CombinableMatcher: org.hamcrest.core.CombinableMatcher$CombinableEitherMatcher either(org.hamcrest.Matcher)> -> <org.hamcrest.core.CombinableMatcher$CombinableEitherMatcher: void <init>(org.hamcrest.Matcher)>
<org.hamcrest.core.CombinableMatcher: org.hamcrest.core.CombinableMatcher and(org.hamcrest.Matcher)> -> <org.hamcrest.core.CombinableMatcher: java.util.ArrayList templatedListWith(org.hamcrest.Matcher)>
<org.hamcrest.core.CombinableMatcher: org.hamcrest.core.CombinableMatcher and(org.hamcrest.Matcher)> -> <org.hamcrest.core.AllOf: void <init>(java.lang.Iterable)>
<org.hamcrest.core.CombinableMatcher: org.hamcrest.core.CombinableMatcher and(org.hamcrest.Matcher)> -> <org.hamcrest.core.CombinableMatcher: void <init>(org.hamcrest.Matcher)>
<org.hamcrest.core.CombinableMatcher: org.hamcrest.core.CombinableMatcher or(org.hamcrest.Matcher)> -> <org.hamcrest.core.CombinableMatcher: java.util.ArrayList templatedListWith(org.hamcrest.Matcher)>
<org.hamcrest.core.CombinableMatcher: org.hamcrest.core.CombinableMatcher or(org.hamcrest.Matcher)> -> <org.hamcrest.core.AnyOf: void <init>(java.lang.Iterable)>
<org.hamcrest.core.CombinableMatcher: org.hamcrest.core.CombinableMatcher or(org.hamcrest.Matcher)> -> <org.hamcrest.core.CombinableMatcher: void <init>(org.hamcrest.Matcher)>
<com.example.intentFlowBench.R$layout: void <init>()> -> <java.lang.Object: void <init>()>
<org.hamcrest.core.IsCollectionContaining: void <init>(org.hamcrest.Matcher)> -> <org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>
<org.hamcrest.core.IsCollectionContaining: org.hamcrest.Matcher hasItem(java.lang.Object)> -> <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>
<org.hamcrest.core.IsCollectionContaining: org.hamcrest.Matcher hasItem(java.lang.Object)> -> <org.hamcrest.core.IsCollectionContaining: void <init>(org.hamcrest.Matcher)>
<org.hamcrest.core.IsCollectionContaining: org.hamcrest.Matcher hasItem(org.hamcrest.Matcher)> -> <org.hamcrest.core.IsCollectionContaining: void <init>(org.hamcrest.Matcher)>
<org.hamcrest.core.IsCollectionContaining: org.hamcrest.Matcher hasItems(java.lang.Object[])> -> <org.hamcrest.core.IsCollectionContaining: org.hamcrest.Matcher hasItem(java.lang.Object)>
<org.hamcrest.core.IsCollectionContaining: org.hamcrest.Matcher hasItems(java.lang.Object[])> -> <org.hamcrest.core.AllOf: org.hamcrest.Matcher allOf(java.lang.Iterable)>
<org.hamcrest.core.IsCollectionContaining: org.hamcrest.Matcher hasItems(org.hamcrest.Matcher[])> -> <org.hamcrest.core.IsCollectionContaining: void <init>(org.hamcrest.Matcher)>
<org.hamcrest.core.IsCollectionContaining: org.hamcrest.Matcher hasItems(org.hamcrest.Matcher[])> -> <org.hamcrest.core.AllOf: org.hamcrest.Matcher allOf(java.lang.Iterable)>
<org.hamcrest.core.IsCollectionContaining: boolean matchesSafely(java.lang.Object,org.hamcrest.Description)> -> <org.hamcrest.core.IsCollectionContaining: boolean matchesSafely(java.lang.Iterable,org.hamcrest.Description)>
<org.hamcrest.internal.ArrayIterator: void <init>(java.lang.Object)> -> <java.lang.Object: void <init>()>
<org.hamcrest.StringDescription: void <init>()> -> <org.hamcrest.StringDescription: void <init>(java.lang.Appendable)>
<org.hamcrest.StringDescription: void <init>(java.lang.Appendable)> -> <org.hamcrest.BaseDescription: void <init>()>
<org.hamcrest.StringDescription: java.lang.String asString(org.hamcrest.SelfDescribing)> -> <org.hamcrest.StringDescription: java.lang.String toString(org.hamcrest.SelfDescribing)>
<org.hamcrest.StringDescription: java.lang.String toString(org.hamcrest.SelfDescribing)> -> <org.hamcrest.StringDescription: void <init>()>
<org.hamcrest.StringDescription: java.lang.String toString(org.hamcrest.SelfDescribing)> -> <org.hamcrest.BaseDescription: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>
<com.example.intentFlowBench.R: void <init>()> -> <java.lang.Object: void <init>()>
<org.hamcrest.core.Is: void <init>(org.hamcrest.Matcher)> -> <org.hamcrest.BaseMatcher: void <init>()>
<org.hamcrest.core.Is: org.hamcrest.Matcher is(java.lang.Class)> -> <org.hamcrest.core.IsInstanceOf: org.hamcrest.Matcher instanceOf(java.lang.Class)>
<org.hamcrest.core.Is: org.hamcrest.Matcher is(java.lang.Class)> -> <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>
<org.hamcrest.core.Is: org.hamcrest.Matcher is(java.lang.Object)> -> <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>
<org.hamcrest.core.Is: org.hamcrest.Matcher is(java.lang.Object)> -> <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>
<org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)> -> <org.hamcrest.core.Is: void <init>(org.hamcrest.Matcher)>
<org.hamcrest.core.Is: org.hamcrest.Matcher isA(java.lang.Class)> -> <org.hamcrest.core.IsInstanceOf: org.hamcrest.Matcher instanceOf(java.lang.Class)>
<org.hamcrest.core.Is: org.hamcrest.Matcher isA(java.lang.Class)> -> <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>
<com.example.intentFlowBench.R$string: void <init>()> -> <java.lang.Object: void <init>()>
<org.hamcrest.core.SubstringMatcher: void <init>(java.lang.String)> -> <org.hamcrest.TypeSafeMatcher: void <init>()>
<org.hamcrest.core.SubstringMatcher: void describeMismatchSafely(java.lang.Object,org.hamcrest.Description)> -> <org.hamcrest.core.SubstringMatcher: void describeMismatchSafely(java.lang.String,org.hamcrest.Description)>
<org.hamcrest.core.SubstringMatcher: boolean matchesSafely(java.lang.Object)> -> <org.hamcrest.core.SubstringMatcher: boolean matchesSafely(java.lang.String)>
<com.example.intentFlowBench.R$id: void <init>()> -> <java.lang.Object: void <init>()>
<org.hamcrest.Condition: void <clinit>()> -> <org.hamcrest.Condition$NotMatched: void <init>(org.hamcrest.Condition$1)>
<org.hamcrest.Condition: void <init>()> -> <java.lang.Object: void <init>()>
<org.hamcrest.Condition: void <init>(org.hamcrest.Condition$1)> -> <org.hamcrest.Condition: void <init>()>
<org.hamcrest.Condition: org.hamcrest.Condition matched(java.lang.Object,org.hamcrest.Description)> -> <org.hamcrest.Condition$Matched: void <init>(java.lang.Object,org.hamcrest.Description,org.hamcrest.Condition$1)>
<org.hamcrest.CustomMatcher: void <init>(java.lang.String)> -> <org.hamcrest.BaseMatcher: void <init>()>
<org.hamcrest.core.DescribedAs: void <init>(java.lang.String,org.hamcrest.Matcher,java.lang.Object[])> -> <org.hamcrest.BaseMatcher: void <init>()>
<org.hamcrest.core.DescribedAs: org.hamcrest.Matcher describedAs(java.lang.String,org.hamcrest.Matcher,java.lang.Object[])> -> <org.hamcrest.core.DescribedAs: void <init>(java.lang.String,org.hamcrest.Matcher,java.lang.Object[])>
<org.hamcrest.core.DescribedAs: void describeTo(org.hamcrest.Description)> -> <java.lang.String: java.lang.String substring(int,int)>
<com.example.intentFlowBench.BuildConfig: void <init>()> -> <java.lang.Object: void <init>()>
<org.hamcrest.CustomTypeSafeMatcher: void <init>(java.lang.String)> -> <org.hamcrest.TypeSafeMatcher: void <init>()>
<org.hamcrest.TypeSafeDiagnosingMatcher: void <clinit>()> -> <org.hamcrest.internal.ReflectiveTypeFinder: void <init>(java.lang.String,int,int)>
<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>(java.lang.Class)> -> <org.hamcrest.BaseMatcher: void <init>()>
<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>(java.lang.Class)> -> <org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>
<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>(org.hamcrest.internal.ReflectiveTypeFinder)> -> <org.hamcrest.BaseMatcher: void <init>()>
<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>(org.hamcrest.internal.ReflectiveTypeFinder)> -> <org.hamcrest.internal.ReflectiveTypeFinder: java.lang.Class findExpectedType(java.lang.Class)>
<org.hamcrest.TypeSafeDiagnosingMatcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)> -> <org.hamcrest.BaseMatcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>
<org.hamcrest.TypeSafeDiagnosingMatcher: boolean matches(java.lang.Object)> -> <org.hamcrest.Description$NullDescription: void <init>()>
<org.hamcrest.BaseMatcher: void <init>()> -> <java.lang.Object: void <init>()>
<org.hamcrest.BaseMatcher: java.lang.String toString()> -> <org.hamcrest.StringDescription: java.lang.String toString(org.hamcrest.SelfDescribing)>
<org.hamcrest.internal.SelfDescribingValueIterator: void <init>(java.util.Iterator)> -> <java.lang.Object: void <init>()>
<org.hamcrest.internal.SelfDescribingValueIterator: java.lang.Object next()> -> <org.hamcrest.internal.SelfDescribingValueIterator: org.hamcrest.SelfDescribing next()>
<org.hamcrest.internal.SelfDescribingValueIterator: org.hamcrest.SelfDescribing next()> -> <org.hamcrest.internal.SelfDescribingValue: void <init>(java.lang.Object)>
<org.hamcrest.core.IsSame: void <init>(java.lang.Object)> -> <org.hamcrest.BaseMatcher: void <init>()>
<org.hamcrest.core.IsSame: org.hamcrest.Matcher sameInstance(java.lang.Object)> -> <org.hamcrest.core.IsSame: void <init>(java.lang.Object)>
<org.hamcrest.core.IsSame: org.hamcrest.Matcher theInstance(java.lang.Object)> -> <org.hamcrest.core.IsSame: void <init>(java.lang.Object)>
<org.hamcrest.Condition$Matched: void <init>(java.lang.Object,org.hamcrest.Description)> -> <org.hamcrest.Condition: void <init>(org.hamcrest.Condition$1)>
<org.hamcrest.Condition$Matched: void <init>(java.lang.Object,org.hamcrest.Description,org.hamcrest.Condition$1)> -> <org.hamcrest.Condition$Matched: void <init>(java.lang.Object,org.hamcrest.Description)>
<org.hamcrest.core.IsNull: void <init>()> -> <org.hamcrest.BaseMatcher: void <init>()>
<org.hamcrest.core.IsNull: org.hamcrest.Matcher notNullValue()> -> <org.hamcrest.core.IsNull: org.hamcrest.Matcher nullValue()>
<org.hamcrest.core.IsNull: org.hamcrest.Matcher notNullValue()> -> <org.hamcrest.core.IsNot: org.hamcrest.Matcher not(org.hamcrest.Matcher)>
<org.hamcrest.core.IsNull: org.hamcrest.Matcher notNullValue(java.lang.Class)> -> <org.hamcrest.core.IsNull: org.hamcrest.Matcher nullValue(java.lang.Class)>
<org.hamcrest.core.IsNull: org.hamcrest.Matcher notNullValue(java.lang.Class)> -> <org.hamcrest.core.IsNot: org.hamcrest.Matcher not(org.hamcrest.Matcher)>
<org.hamcrest.core.IsNull: org.hamcrest.Matcher nullValue()> -> <org.hamcrest.core.IsNull: void <init>()>
<org.hamcrest.core.IsNull: org.hamcrest.Matcher nullValue(java.lang.Class)> -> <org.hamcrest.core.IsNull: void <init>()>
<org.hamcrest.CoreMatchers: void <init>()> -> <java.lang.Object: void <init>()>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher allOf(java.lang.Iterable)> -> <org.hamcrest.core.AllOf: org.hamcrest.Matcher allOf(java.lang.Iterable)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher allOf(org.hamcrest.Matcher,org.hamcrest.Matcher)> -> <org.hamcrest.core.AllOf: org.hamcrest.Matcher allOf(org.hamcrest.Matcher,org.hamcrest.Matcher)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher allOf(org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher)> -> <org.hamcrest.core.AllOf: org.hamcrest.Matcher allOf(org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher allOf(org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher)> -> <org.hamcrest.core.AllOf: org.hamcrest.Matcher allOf(org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher allOf(org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher)> -> <org.hamcrest.core.AllOf: org.hamcrest.Matcher allOf(org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher allOf(org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher)> -> <org.hamcrest.core.AllOf: org.hamcrest.Matcher allOf(org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher allOf(org.hamcrest.Matcher[])> -> <org.hamcrest.core.AllOf: org.hamcrest.Matcher allOf(org.hamcrest.Matcher[])>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher any(java.lang.Class)> -> <org.hamcrest.core.IsInstanceOf: org.hamcrest.Matcher any(java.lang.Class)>
<org.hamcrest.CoreMatchers: org.hamcrest.core.AnyOf anyOf(java.lang.Iterable)> -> <org.hamcrest.core.AnyOf: org.hamcrest.core.AnyOf anyOf(java.lang.Iterable)>
<org.hamcrest.CoreMatchers: org.hamcrest.core.AnyOf anyOf(org.hamcrest.Matcher,org.hamcrest.Matcher)> -> <org.hamcrest.core.AnyOf: org.hamcrest.core.AnyOf anyOf(org.hamcrest.Matcher,org.hamcrest.Matcher)>
<org.hamcrest.CoreMatchers: org.hamcrest.core.AnyOf anyOf(org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher)> -> <org.hamcrest.core.AnyOf: org.hamcrest.core.AnyOf anyOf(org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher)>
<org.hamcrest.CoreMatchers: org.hamcrest.core.AnyOf anyOf(org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher)> -> <org.hamcrest.core.AnyOf: org.hamcrest.core.AnyOf anyOf(org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher)>
<org.hamcrest.CoreMatchers: org.hamcrest.core.AnyOf anyOf(org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher)> -> <org.hamcrest.core.AnyOf: org.hamcrest.core.AnyOf anyOf(org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher)>
<org.hamcrest.CoreMatchers: org.hamcrest.core.AnyOf anyOf(org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher)> -> <org.hamcrest.core.AnyOf: org.hamcrest.core.AnyOf anyOf(org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher)>
<org.hamcrest.CoreMatchers: org.hamcrest.core.AnyOf anyOf(org.hamcrest.Matcher[])> -> <org.hamcrest.core.AnyOf: org.hamcrest.core.AnyOf anyOf(org.hamcrest.Matcher[])>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher anything()> -> <org.hamcrest.core.IsAnything: org.hamcrest.Matcher anything()>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher anything(java.lang.String)> -> <org.hamcrest.core.IsAnything: org.hamcrest.Matcher anything(java.lang.String)>
<org.hamcrest.CoreMatchers: org.hamcrest.core.CombinableMatcher$CombinableBothMatcher both(org.hamcrest.Matcher)> -> <org.hamcrest.core.CombinableMatcher: org.hamcrest.core.CombinableMatcher$CombinableBothMatcher both(org.hamcrest.Matcher)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher containsString(java.lang.String)> -> <org.hamcrest.core.StringContains: org.hamcrest.Matcher containsString(java.lang.String)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher describedAs(java.lang.String,org.hamcrest.Matcher,java.lang.Object[])> -> <org.hamcrest.core.DescribedAs: org.hamcrest.Matcher describedAs(java.lang.String,org.hamcrest.Matcher,java.lang.Object[])>
<org.hamcrest.CoreMatchers: org.hamcrest.core.CombinableMatcher$CombinableEitherMatcher either(org.hamcrest.Matcher)> -> <org.hamcrest.core.CombinableMatcher: org.hamcrest.core.CombinableMatcher$CombinableEitherMatcher either(org.hamcrest.Matcher)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher endsWith(java.lang.String)> -> <org.hamcrest.core.StringEndsWith: org.hamcrest.Matcher endsWith(java.lang.String)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)> -> <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher everyItem(org.hamcrest.Matcher)> -> <org.hamcrest.core.Every: org.hamcrest.Matcher everyItem(org.hamcrest.Matcher)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher hasItem(java.lang.Object)> -> <org.hamcrest.core.IsCollectionContaining: org.hamcrest.Matcher hasItem(java.lang.Object)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher hasItem(org.hamcrest.Matcher)> -> <org.hamcrest.core.IsCollectionContaining: org.hamcrest.Matcher hasItem(org.hamcrest.Matcher)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher hasItems(java.lang.Object[])> -> <org.hamcrest.core.IsCollectionContaining: org.hamcrest.Matcher hasItems(java.lang.Object[])>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher hasItems(org.hamcrest.Matcher[])> -> <org.hamcrest.core.IsCollectionContaining: org.hamcrest.Matcher hasItems(org.hamcrest.Matcher[])>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher instanceOf(java.lang.Class)> -> <org.hamcrest.core.IsInstanceOf: org.hamcrest.Matcher instanceOf(java.lang.Class)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Class)> -> <org.hamcrest.core.Is: org.hamcrest.Matcher is(java.lang.Class)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)> -> <org.hamcrest.core.Is: org.hamcrest.Matcher is(java.lang.Object)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)> -> <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher isA(java.lang.Class)> -> <org.hamcrest.core.Is: org.hamcrest.Matcher isA(java.lang.Class)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher not(java.lang.Object)> -> <org.hamcrest.core.IsNot: org.hamcrest.Matcher not(java.lang.Object)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher not(org.hamcrest.Matcher)> -> <org.hamcrest.core.IsNot: org.hamcrest.Matcher not(org.hamcrest.Matcher)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher notNullValue()> -> <org.hamcrest.core.IsNull: org.hamcrest.Matcher notNullValue()>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher notNullValue(java.lang.Class)> -> <org.hamcrest.core.IsNull: org.hamcrest.Matcher notNullValue(java.lang.Class)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher nullValue()> -> <org.hamcrest.core.IsNull: org.hamcrest.Matcher nullValue()>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher nullValue(java.lang.Class)> -> <org.hamcrest.core.IsNull: org.hamcrest.Matcher nullValue(java.lang.Class)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher sameInstance(java.lang.Object)> -> <org.hamcrest.core.IsSame: org.hamcrest.Matcher sameInstance(java.lang.Object)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher startsWith(java.lang.String)> -> <org.hamcrest.core.StringStartsWith: org.hamcrest.Matcher startsWith(java.lang.String)>
<org.hamcrest.CoreMatchers: org.hamcrest.Matcher theInstance(java.lang.Object)> -> <org.hamcrest.core.IsSame: org.hamcrest.Matcher theInstance(java.lang.Object)>
<org.hamcrest.core.CombinableMatcher$CombinableBothMatcher: void <init>(org.hamcrest.Matcher)> -> <java.lang.Object: void <init>()>
<org.hamcrest.core.CombinableMatcher$CombinableBothMatcher: org.hamcrest.core.CombinableMatcher and(org.hamcrest.Matcher)> -> <org.hamcrest.core.CombinableMatcher: void <init>(org.hamcrest.Matcher)>
<org.hamcrest.core.CombinableMatcher$CombinableBothMatcher: org.hamcrest.core.CombinableMatcher and(org.hamcrest.Matcher)> -> <org.hamcrest.core.CombinableMatcher: org.hamcrest.core.CombinableMatcher and(org.hamcrest.Matcher)>
<org.hamcrest.core.StringEndsWith: void <init>(java.lang.String)> -> <org.hamcrest.core.SubstringMatcher: void <init>(java.lang.String)>
<org.hamcrest.core.StringEndsWith: org.hamcrest.Matcher endsWith(java.lang.String)> -> <org.hamcrest.core.StringEndsWith: void <init>(java.lang.String)>
<org.hamcrest.core.StringStartsWith: void <init>(java.lang.String)> -> <org.hamcrest.core.SubstringMatcher: void <init>(java.lang.String)>
<org.hamcrest.core.StringStartsWith: org.hamcrest.Matcher startsWith(java.lang.String)> -> <org.hamcrest.core.StringStartsWith: void <init>(java.lang.String)>
<com.example.intentFlowBench.SubActivity11: void onCreate(android.os.Bundle)> -> <com.example.intentFlowBench.myButton: void setMyListener(com.example.intentFlowBench.myButton$MyListener)>
<org.hamcrest.MatcherAssert: void <init>()> -> <java.lang.Object: void <init>()>
<org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)> -> <org.hamcrest.MatcherAssert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>
<org.hamcrest.MatcherAssert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)> -> <org.hamcrest.StringDescription: void <init>()>
<org.hamcrest.MatcherAssert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)> -> <org.hamcrest.BaseDescription: org.hamcrest.Description appendText(java.lang.String)>
<org.hamcrest.MatcherAssert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)> -> <org.hamcrest.StringDescription: java.lang.String toString()>
<org.hamcrest.core.AnyOf: void <init>(java.lang.Iterable)> -> <org.hamcrest.core.ShortcutCombination: void <init>(java.lang.Iterable)>
<org.hamcrest.core.AnyOf: org.hamcrest.core.AnyOf anyOf(java.lang.Iterable)> -> <org.hamcrest.core.AnyOf: void <init>(java.lang.Iterable)>
<org.hamcrest.core.AnyOf: org.hamcrest.core.AnyOf anyOf(org.hamcrest.Matcher,org.hamcrest.Matcher)> -> <org.hamcrest.core.AnyOf: org.hamcrest.core.AnyOf anyOf(java.lang.Iterable)>
<org.hamcrest.core.AnyOf: org.hamcrest.core.AnyOf anyOf(org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher)> -> <org.hamcrest.core.AnyOf: org.hamcrest.core.AnyOf anyOf(java.lang.Iterable)>
<org.hamcrest.core.AnyOf: org.hamcrest.core.AnyOf anyOf(org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher)> -> <org.hamcrest.core.AnyOf: org.hamcrest.core.AnyOf anyOf(java.lang.Iterable)>
<org.hamcrest.core.AnyOf: org.hamcrest.core.AnyOf anyOf(org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher)> -> <org.hamcrest.core.AnyOf: org.hamcrest.core.AnyOf anyOf(java.lang.Iterable)>
<org.hamcrest.core.AnyOf: org.hamcrest.core.AnyOf anyOf(org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher,org.hamcrest.Matcher)> -> <org.hamcrest.core.AnyOf: org.hamcrest.core.AnyOf anyOf(java.lang.Iterable)>
<org.hamcrest.core.AnyOf: org.hamcrest.core.AnyOf anyOf(org.hamcrest.Matcher[])> -> <org.hamcrest.core.AnyOf: org.hamcrest.core.AnyOf anyOf(java.lang.Iterable)>
<org.hamcrest.core.AnyOf: void describeTo(org.hamcrest.Description)> -> <org.hamcrest.core.AnyOf: void describeTo(org.hamcrest.Description,java.lang.String)>
<org.hamcrest.core.AnyOf: void describeTo(org.hamcrest.Description,java.lang.String)> -> <org.hamcrest.core.ShortcutCombination: void describeTo(org.hamcrest.Description,java.lang.String)>
<org.hamcrest.core.AnyOf: boolean matches(java.lang.Object)> -> <org.hamcrest.core.ShortcutCombination: boolean matches(java.lang.Object,boolean)>
<com.example.intentFlowBench.ObjInfo$1: void <init>()> -> <java.lang.Object: void <init>()>
<com.example.intentFlowBench.ObjInfo$1: com.example.intentFlowBench.ObjInfo createFromParcel(android.os.Parcel)> -> <com.example.intentFlowBench.ObjInfo: void <init>(android.os.Parcel)>
<com.example.intentFlowBench.ObjInfo$1: java.lang.Object createFromParcel(android.os.Parcel)> -> <com.example.intentFlowBench.ObjInfo$1: com.example.intentFlowBench.ObjInfo createFromParcel(android.os.Parcel)>
<com.example.intentFlowBench.ObjInfo$1: java.lang.Object[] newArray(int)> -> <com.example.intentFlowBench.ObjInfo$1: com.example.intentFlowBench.ObjInfo[] newArray(int)>
<org.hamcrest.core.IsAnything: void <init>(java.lang.String)> -> <org.hamcrest.BaseMatcher: void <init>()>
<org.hamcrest.core.IsAnything: org.hamcrest.Matcher anything()> -> <org.hamcrest.core.IsAnything: void <init>()>
<org.hamcrest.core.IsAnything: org.hamcrest.Matcher anything(java.lang.String)> -> <org.hamcrest.core.IsAnything: void <init>(java.lang.String)>
<org.hamcrest.core.ShortcutCombination: void <init>(java.lang.Iterable)> -> <org.hamcrest.BaseMatcher: void <init>()>
<org.hamcrest.core.IsInstanceOf: void <init>(java.lang.Class)> -> <org.hamcrest.DiagnosingMatcher: void <init>()>
<org.hamcrest.core.IsInstanceOf: void <init>(java.lang.Class)> -> <org.hamcrest.core.IsInstanceOf: java.lang.Class matchableClass(java.lang.Class)>
<org.hamcrest.core.IsInstanceOf: org.hamcrest.Matcher any(java.lang.Class)> -> <org.hamcrest.core.IsInstanceOf: void <init>(java.lang.Class)>
<org.hamcrest.core.IsInstanceOf: org.hamcrest.Matcher instanceOf(java.lang.Class)> -> <org.hamcrest.core.IsInstanceOf: void <init>(java.lang.Class)>
<org.hamcrest.Description: void <clinit>()> -> <org.hamcrest.Description$NullDescription: void <init>()>
<org.hamcrest.FeatureMatcher: void <clinit>()> -> <org.hamcrest.internal.ReflectiveTypeFinder: void <init>(java.lang.String,int,int)>
<org.hamcrest.FeatureMatcher: void <init>(org.hamcrest.Matcher,java.lang.String,java.lang.String)> -> <org.hamcrest.TypeSafeDiagnosingMatcher: void <init>(org.hamcrest.internal.ReflectiveTypeFinder)>
